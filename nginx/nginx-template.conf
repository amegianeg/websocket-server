daemon on;
pid /run/nginx.pid;
worker_processes 4;
worker_rlimit_nofile 65535;

events {
    multi_accept on;
    worker_connections 65535;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    server_tokens off;
    log_not_found off;
    types_hash_max_size 2048;
    client_max_body_size 20m;

    # MIME
    include mime.types;
    default_type application/octet-stream;

    # logging
    log_format customlog '[$time_local] $remote_addr - $remote_user - $server_name to: $upstream_addr: $request upstream_response_time $upstream_response_time msec $msec request_time $request_time';
    access_log /var/log/nginx/access.log customlog;
    error_log /var/log/nginx/error.log warn;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    map $request_uri $request_uri_path {
        "~^(?P<path>[^?]*)(\?.*)?$"  $path;
    }

    upstream websocket {
        server 127.0.0.1:8088;
    }

    server {
        listen 8888 default;

        client_max_body_size 4G;
        server_name _;

        real_ip_header X-Forwarded-For;
        real_ip_recursive on;

        include /etc/nginx/includes/security.conf;

        location = /socket.io/ {
            # Enable this hack in case Fovia does not allow passing more
            # query parameters like 'token'
            #set $eio '';
            #if ($request_uri ~* "EIO=(\d)") {
            #    set $eio $1;
            #}
            #set $transport '';
            #if ($request_uri ~* "transport=(\w+)") {
            #    set $transport $1;
            #}

            proxy_pass_request_body off;
            proxy_pass http://websocket$request_uri;
            #proxy_pass http://websocket$request_uri_path?EIO=$eio&transport=$transport;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";

            auth_request /auth/verify;
        }

        location /auth/verify {
            internal;
            proxy_pass ${BACKEND_API}/api/auth/token/verify/;
            proxy_pass_request_body off;

            set $token '';
            if ($request_uri ~* "token=([A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+\/=]*)") {
                set $token $1;
            }

            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Authorization "Bearer $token";

            # do not cache requests
            add_header Cache-Control public;
            add_header Cache-Control no-store;
            add_header Cache-Control no-cache;
        }

        location / {
            proxy_pass http://websocket$request_uri;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
        }
    }
}

